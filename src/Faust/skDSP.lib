declare name      "DSP library";
declare version   "1.0";
declare author    "Stefan Kersten";
declare license   "GPL";
declare copyright "Copyright (c) Stefan Kersten 2008";

import("math.lib");
import("music.lib");

// ====================================================================
// Unit conversions

// Convert Hertz to radians per sample.
hz2rad(f) = 2.*PI*f/float(SR);

// Convert radians per sample to Hertz.
rad2hz(r) = r*float(SR)/(2.*PI);

// Convert Hertz to normalized frequency.
hz2norm(f) = f/float(SR);

// Convert normalized frequency to Hertz.
norm2hz(w) = w*float(SR);

// Convert linear amplitude to dezibel.
amp2db(x) = 20.0*log10(x);

// Convert dezibel to linear amplitude.
db2amp(x) = pow(10.0, 0.05*x);

// ====================================================================
// Basic signal transformations
// Many of these are from SuperCollider.

// Return fractional part of signal x.
//frac(x) = x - int(x);

// Round x to multiples of a.
round(x,a) = a * floor(x/a+0.5);

// Round x to multiples of a (may be zero).
round0(x,a) = if (a == 0.0, x, round(x,a));

// Round x upwards to multiples of a.
roundup(x,a) = a * ceil(x/a);

// Round x upwards to multiples of a (may be zero).
roundup0(x,a) = if (a == 0.0, x, round_up(x,a));

// Truncate x to multiples of a.
trunc(x,a) = a * floor(x/a);

// Truncate x to multiples of a (may be zero).
trunc0(x,a) = if (a == 0.0, x, trunc(x,a));

// Constrain signal x in interval [l,h].
clip(l,h,x) = max(l,min(x,h));

// Constrain signal x in interval [-b,b].
clip2(b) = clip(neg(b),b);

// Modulo operation that behaves correctly for negative inputs.
mod(x,y) = wrap(0.0,y,x);
//mod(x,r) = if (r == 0.0, 0.0, y)
//    with {
//      p = (x < 0.0) | (r <= x);
//      y = x - float(p)*trunc(x, r);
//    };

// Wrap signal `x' in interval [l,h[.
wrap(l,h,x) = if (r == 0.0, l, y)
    with {
        r = h - l;
    	p = (x < l) | (h <= x);
        y = x - float(p)*trunc(x-l, r);
    };

// Wrap signal x in interval [-b,b[.
wrap2(b) = wrap(neg(b),b);

// Fold signal x in interval [l,h[.
fold(l,h,x) = if (r == 0.0, l, if (p, y, x))
    with {
        r = h - l;
    	p = (x < l) | (h <= x);
        c = x - l - trunc(x-l, 2.0*r);
        y = l + if (c >= r, 2.0*r-c, c);
    };

// Fold signal x in interval [-b,b[.
fold2(b,x) = fold(neg(b),b);

// ====================================================================
// Control structures

if(p,a,b) = select2(p,b,a);

// ====================================================================
// Table lookup

// Table indices normalized to [0,1].
table_time(n) = float(time)/float(n);

// Convert value in [0,1] to fractional table index.
table_index_f(n, x) = x * float(n);

// Convert value in [0,1] to integer table index.
table_index_i(n, x) = int(floor(table_index_f(n, x)));

// Table lookup with linear interpolation.
rdtable_l(n,f,x) = y0 + xf * (y1 - y0)
    with {
        xi = table_index_i(n, x);
        xf = table_index_f(n, x) - xi;
        fn = table_time(n) : f;
        y0 = rdtable(n+1, fn, xi  );
        y1 = rdtable(n+1, fn, xi+1);
    };

// Table lookup with cubic interpolation (James McCartney).
//
// From http://www.musicdsp.org/
//
rdtable_c_jmc(n,f,x) = ((c3 * x + c2) * x + c1) * x + c0
    with {
        xi  = table_index_i(n, x);
        xf  = table_index_f(n, x) - xi;
        fn  = prefix(0 : f, table_time(n) : f);
        ym1 = rdtable(n+3, fn, xi  );
        y0  = rdtable(n+3, fn, xi+1);
        y1  = rdtable(n+3, fn, xi+2);
        y2  = rdtable(n+3, fn, xi+3);
        c0  = y0;
        c1  = 0.5 * (y1 - ym1);
        c3  = 1.5 * (y0 - y1) + 0.5 * (y2 - ym1);
        c2  = ym1 - y0 + c1 - c3;
    };

// Table lookup with cubic interpolation (Laurent de Soras).
//
// From http://www.musicdsp.org/
//
rdtable_c_lds(n,f,x) = ((a * xf + b) * xf + c) * xf + y0
    with {
        xi  = table_index_i(n, x);
        xf  = table_index_f(n, x) - xi;
        fn  = prefix(0 : f, table_time(n) : f);
        ym1 = rdtable(n+3, fn, xi  );
        y0  = rdtable(n+3, fn, xi+1);
        y1  = rdtable(n+3, fn, xi+2);
        y2  = rdtable(n+3, fn, xi+3);
        c   = (y1 - ym1) * 0.5;
        v   = y0 - y1;
        w   = c + v;
        a   = w + v + (y2 - y0) * 0.5;
        b   = neg(w + a);
    };

// Table lookup with cubic interpolation.
rdtable_c = rdtable_c_jmc;
