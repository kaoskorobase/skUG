declare name      "DSP library";
declare version   "1.0";
declare author    "Stefan Kersten";
declare license   "GPL";
declare copyright "Copyright (c) Stefan Kersten 2008";

import("math.lib");
import("music.lib");

// ====================================================================
// Unit conversions

// Convert Hertz to radians per sample.
hz2rad(f) = 2.*PI*f/float(SR);

// Convert radians per sample to Hertz.
rad2hz(r) = r*float(SR)/(2.*PI);

// Convert Hertz to normalized frequency.
hz2norm(f) = f/float(SR);

// Convert normalized frequency to Hertz.
norm2hz(w) = w*float(SR);

// Convert linear amplitude to dezibel.
amp2db(x) = 20.*log10(x);

// Convert dezibel to linear amplitude.
db2amp(x) = pow(10., x * .05);

// ====================================================================
// Basic signal transformations

// Constrain signal `x' in interval [l,h].
clip(x,l,h) = max(l, min(x, h));

// Contrain signal `x' in interval [-b,b].
clip2(x,b) = clip(x, neg(b), b);

// Wrap signal `x' in interval [l,h] (cycled).
// wrap(x,l,h) =

// Fold signal `x' in interval [l,h] (mirrored).
// fold(x,l,h)

// Return fractional part of signal `x'.
// TODO: more efficient version?
//ffrac(x) = x - int(x);

// Modulo operation that behaves correctly for negative inputs.
mod(x,y) = float(y != 0.) * (x - y*floor(x/y));

// ====================================================================
// Table lookup

// Table indices normalized to [0,1].
table_time(n) = float(time)/float(n);

// Convert value in [0,1] to fractional table index.
table_index_f(n, x) = x * float(n);

// Convert value in [0,1] to integer table index.
table_index_i(n, x) = int(floor(table_index_f(n, x)));

// Table lookup with linear interpolation.
rdtable_l(n,f,x) = y0 + xf * (y1 - y0)
    with {
        xi = table_index_i(n, x);
        xf = table_index_f(n, x) - xi;
        fn = table_time(n) : f;
        y0 = rdtable(n+1, fn, xi  );
        y1 = rdtable(n+1, fn, xi+1);
    };

// Table lookup with cubic interpolation (James McCartney).
//
// From http://www.musicdsp.org/
//
rdtable_c_jmc(n,f,x) = ((c3 * x + c2) * x + c1) * x + c0
    with {
        xi  = table_index_i(n, x);
        xf  = table_index_f(n, x) - xi;
        fn  = prefix(0 : f, table_time(n) : f);
        ym1 = rdtable(n+3, fn, xi  );
        y0  = rdtable(n+3, fn, xi+1);
        y1  = rdtable(n+3, fn, xi+2);
        y2  = rdtable(n+3, fn, xi+3);
        c0  = y0;
        c1  = 0.5 * (y1 - ym1);
        c3  = 1.5 * (y0 - y1) + 0.5 * (y2 - ym1);
        c2  = ym1 - y0 + c1 - c3;
    };

// Table lookup with cubic interpolation (Laurent de Soras).
//
// From http://www.musicdsp.org/
//
rdtable_c_lds(n,f,x) = ((a * xf + b) * xf + c) * xf + y0
    with {
        xi  = table_index_i(n, x);
        xf  = table_index_f(n, x) - xi;
        fn  = prefix(0 : f, table_time(n) : f);
        ym1 = rdtable(n+3, fn, xi  );
        y0  = rdtable(n+3, fn, xi+1);
        y1  = rdtable(n+3, fn, xi+2);
        y2  = rdtable(n+3, fn, xi+3);
        c   = (y1 - ym1) * 0.5;
        v   = y0 - y1;
        w   = c + v;
        a   = w + v + (y2 - y0) * 0.5;
        b   = neg(w + a);
    };

// Table lookup with cubic interpolation.
rdtable_c = rdtable_c_jmc;
