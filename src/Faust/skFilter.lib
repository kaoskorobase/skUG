declare name      "Butterworth filter library";
declare version   "1.0";
declare author    "Stefan Kersten";
declare license   "GPL";
declare copyright "Copyright (c) Stefan Kersten 2008";

import("filter.lib");
/*import("music.lib");*/
import("skDSP.lib");

// Butterworth polynomial coefficients.
Beta21 = 1.4142135623730951454746218587388284504413604736328;
Beta41 = 0.7653668647301794525361628984683193266391754150391;
Beta42 = 1.8477590650225734769662722101202234625816345214844;
Beta61 = 0.5176380902050417009974125903681851923465728759766;
Beta62 = 1.4142135623730949234300169337075203657150268554688;
Beta63 = 1.9318516525781364023828245990443974733352661132812;

QPeak      = db2linear(48.);
QPeakScale = 1./QPeak;

QRange21   = db2linear(0);
QRange41   = db2linear(-40);
QRange42   = db2linear(0);
QRange61   = db2linear(-40);
QRange62   = db2linear(-34);
QRange63   = db2linear(0);

// static const double kGainCorrBW[] = { 0.0, 0.79432823472428, 0.63095734448019, 0.50118723362727 };

// Approximate some mappings with linearly interpolated lookup tables.
// `pow' is very costly when performed every sample and accuracy is not
// critical in this case.

// Table size for lookup tables; should be plenty.
TableSize = 1<<16;

// Gain correction for a given q.
butter_gain_corr_f(q) = pow(q, 0.35);
butter_gain_corr_t(q) = rdtable_l(TableSize, butter_gain_corr_f, q);
butter_gain_corr      = butter_gain_corr_t;

// Convert `resonance' in [0..1] to `q' in [0..1].
butter_r2q_f(r) = pow(QPeak, 1.-r) * QPeakScale;
butter_r2q_t(r) = rdtable_l(TableSize, butter_r2q_f, r);
butter_r2q      = butter_r2q_t;

// Compute `q' according to scaling coefficient `a'.
butter_realq(q, a) = 1. - a * (1. - q);

// Convert external parameters `f' (frequency in Hertz) and `r' (resonance)
// to internal filter parameters.
butter_params(f, r) = hz2rad(f) : clip(0.0, 0.99*PI), butter_r2q(r);

// Butterworth controls.
butter_controls = f, r
	with {
		f = vslider("freq", 0, 0, 20000, 0);
		r = vslider("res", 0, 0, 1, 0);
	};

// Compute coefficients for butterworth lowpass second order section (DF1).
butter_coefs_lp(beta, w, q, gain) = b0, b1, b2, a1, a2
    with {
        alpha   = q*beta*sin(w);
        g       = 1./(2.+alpha);
        b0      = (1.-cos(w))*g*gain;
        b1      = 2.*b0;
        b2      = b0;
        a1      = 4.*cos(w)*g;
        a2      = (alpha-2.)*g;
    };

// Compute coefficients for butterworth highpass second order section (DF1).
butter_coefs_hp(beta, w, q, gain) = b0, b1, b2, a1, a2
    with {
        alpha   = q*beta*sin(w);
        g       = 1./(2.+alpha);
        b0      = (1.+cos(w))*g*gain;
        b1      = -2.*b0;
        b2      = b0;
        a1      = 4.*cos(w)*g;
        a2      = (alpha-2.)*g;
    };

// Second order transfer function (DF1).
df2(b0,b1,b2,a1,a2) = conv3(b0,b1,b2) : (+) ~ conv2(a1,a2)
	with {
	  conv3(k0,k1,k2,x) = k0*x + k1*x' + k2*x'';
	  conv2(k0,k1,x)    = k0*x + k1*x';
	};

// Two cascaded second order transfer functions.
df4(b10,b11,b12,a11,a12,b20,b21,b22,a21,a22) =
    df2(b10,b11,b12,a11,a12)
  : df2(b20,b21,b22,a21,a22) ;

// Three cascaded second order transfer functions.
df6(b10,b11,b12,a11,a12,b20,b21,b22,a21,a22,b30,b31,b32,a31,a32) =
    df2(b10,b11,b12,a11,a12)
  : df2(b20,b21,b22,a21,a22)
  : df2(b30,b31,b32,a31,a32) ;

// 2-pole lowpass.
butter_lp_2 = butter_params : coefs : df2
    with {
        coefs(w,q) = butter_coefs_lp(Beta21, w, butter_realq(q, QRange21), butter_gain_corr(q));
    };

// 2-pole highpass.
butter_hp_2 = butter_params : coefs : df2
    with {
        coefs(w,q) = butter_coefs_hp(Beta21, w, butter_realq(q, QRange21), butter_gain_corr(q));
    };

// 4-pole lowpass.
butter_lp_4 = butter_params : coefs : df4
    with {
        coefs(w,q) = butter_coefs_lp(Beta41, w, butter_realq(q, QRange41), butter_gain_corr(q)),
                     butter_coefs_lp(Beta42, w, butter_realq(q, QRange42), 1.                 );
    };

// 4-pole highpass.
butter_hp_4 = butter_params : coefs : df4
    with {
        coefs(w,q) = butter_coefs_hp(Beta41, w, butter_realq(q, QRange41), butter_gain_corr(q)),
                     butter_coefs_hp(Beta42, w, butter_realq(q, QRange42), 1.                 );
    };

// 6-pole lowpass.
butter_lp_6 = butter_params : coefs : df6
    with {
        coefs(w,q) = butter_coefs_lp(Beta61, w, butter_realq(q, QRange61), butter_gain_corr(q)),
                     butter_coefs_lp(Beta62, w, butter_realq(q, QRange62), 1.                 ),
                     butter_coefs_lp(Beta63, w, butter_realq(q, QRange63), 1.                 );
    };

// 6-pole highpass.
butter_hp_6 = butter_params : coefs : df6
    with {
        coefs(w,q) = butter_coefs_hp(Beta61, w, butter_realq(q, QRange61), butter_gain_corr(q)),
                     butter_coefs_hp(Beta62, w, butter_realq(q, QRange62), 1.                 ),
                     butter_coefs_hp(Beta63, w, butter_realq(q, QRange63), 1.                 );
    };
